-- vim:syn=haskell

-- SK-calculus.
define "S" (\x y z -> x z (y z))
define "K" (\x _ -> x)

-- Curry's BCKW system.
define "B" (\x y z -> x (y z))
define "C" (\x y z -> x z y)
define "W" (\x y -> x y y)

-- Self-application.
define "SII" (\x -> x x)

-- Curry's Y combinator.
define "Y" (\f -> SII (\x -> f (x x)))

-- Booleans.
define "T" (\x _ -> x)
define "F" (\_ y -> y)

-- Boolean logic.
define "and" (\m n -> m n m)
define "or" (\m n -> m m n)
define "not" (\m f g -> m g f)
define "xor" (\m n -> m (n F T) n)
define "eq" (\m n -> m n (n F T))
define "nor" (\m n -> m F (n F T))

-- Scalar functions.
define "scalar>" (\x y -> scalar< y x)
define "scalar<>" (\x y -> not (scalar= x y))
define "scalar*" (\x y -> scalar*/ x y 1)
define "scalar/" (\x y -> scalar*/ 1 x y)

-- Church pairs.
define "pair" (\x y z -> z x y)
define "fst" (\p -> p \x y -> x)
define "snd" (\p -> p \x y -> y)
define "apply-pair" (\f p -> p \x y -> (f x), (f y))
define "show-pair'" (\p -> "(" `string+` ((fst p) `string+` ", " `string+` (snd p)) `string+` ")")
define "show-pair" (\p -> show-pair' (apply-pair show p))

-- Lists.
define "nil" (T, error)
define "nil?" (\x -> fst x)
define "cons" (\h t -> F, (h, t))
define "car" (\z -> fst (snd z))
define "cdr" (\z -> snd (snd z))

-- Church numerals.
define "unchurch" (\n -> n (scalar+ 1) 0)
define "+" (\m n f x -> m f (n f x))
-- XXX If * is defined as (\m n f -> m (n f)) then things are much, much slower.
define "*" (\m n -> B n m)
define "**" (\m n -> n m)
define "pred" (\n f x -> n (\g h -> h (g f)) (\_ -> x) (\u -> u))
define "succ" (\n f x -> f (n f x))
define "zero?" (\n -> n (\_ -> F) T)
define "=" (\x y -> scalar= (scalar x) (scalar y))
define "<" (\x y -> scalar< (scalar x) (scalar y))
define ">" (\x y -> < y x)
define "<>" (\x y -> not (= x y))
define "fact" (\n -> zero? n 1 (* n (fact (pred n))))
define "equal" (\x y -> (zero? x (zero? y T F) (zero? y F (equal (pred x) (pred y)))))

-- List-processing.
define "foldl" (\b z l -> nil? l z (foldl b (b z (car l)) (cdr l)))
define "foldr" (\b z l -> nil? l z (b (car l) (foldr b z (cdr l))))
define "apply" (foldl I I)
define "append" (\l m -> nil? l m (car l) `cons` (append (cdr l) m))
define "map" (\g l -> nil? l nil ((g (car l)) `cons` (map g (cdr l))))
define "replace" (\p e l -> map (\o -> (p o) e o) l)
define "reverse" (foldl (\x y -> cons y x) nil)
define "show-list" (\l -> "[" `string+` (nil? l "" (foldl (\x y -> x `string+` ", " `string+` (show y)) (show (car l)) (cdr l))) `string+` "]")
define "print-list" (\l -> print (show-list l) print "\n")
define "split-list" (Y (\f m -> \p l -> nil? l (m, nil) (p (car l) (m, l) (f (append m (cons (car l) nil)) p (cdr l)))) nil)

-- Function composition.
define "." (B)
define "compose" (foldl . I)

-- List creation.
define "repeat" (\n x -> n (cons x) nil)
define "times" (\n f -> compose (repeat n))
define "range" (\x p g -> (cons x (not (p x) nil (range (g x) p g))))
define "up" (\x -> range x (\y -> T))
define "from" (\x -> up x succ)
define "upto" (\x y -> range x (\z -> not (y `=` z)) succ)
define "down" (\x -> range x (\z -> not (zero? z)) pred)
define ".." (upto)

-- String processing.
define "String" string!
define "show-String" (foldl string+ "")
define "break-String" (Y (\f t -> \p s -> nil? s (nil? (String t) nil (cons t nil)) (p (car s) (cons (string+ t (car s)) (f "" p (cdr s))) (f (string+ t (car s)) p (cdr s)))) "")
define "split-String" (Y (\f t -> \p s -> nil? s (nil? (String t) nil (cons t nil)) (p (car s) (cons t (f "" p (cdr s))) (f (string+ t (car s)) p (cdr s)))) "")
define "tokenize-String" (Y (\f t -> \p s -> nil? s (nil? (String t) nil (cons t nil)) (p (car s) (cons t (cons (car s) (f "" p (cdr s)))) (f (string+ t (car s)) p (cdr s)))) "")
-- TODO: Add a variant that sends first and butfirst to the predicate, which returns whether there is a token, the token, the remainder, etc.

-- Ackermann functions.
define "ackA" (Y (\f m n -> (zero? m) (succ n) ((zero? n) (f (pred m) 1) (f (pred m) (f m (pred n))))))
define "ackTH" (Y (\f m n p -> (zero? p) (m `+` n) ((zero? n) ((zero? (pred p)) 0 ((zero? (pred (pred p))) 1 m)) (f m (f m (pred n) p) (pred p)))))

-- Hyper operation.
define "hyper" (Y (\f n a b -> (zero? n) (succ b) ((zero? b) (((zero? (pred n)) a ((zero? (pred (pred n))) 0 1))) (f (pred n) a (f n a (pred b))))))
